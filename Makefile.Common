REPO_ROOT                   := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

#########################################
# Dirs                                  #
#########################################
TOOLS_MOD_FILE              := $(REPO_ROOT)/internal/tools/go.mod
EXCL_TP                     := -not -path '*/third_party/*'
SRC_AND_DOC                 := $(shell find . -name "*.md" -o -name "*.go" -o -name "*.yaml" $(EXCL_TP) -type f | sort)
SRC_AND_SHELL               := $(shell find . -name "*.sh" -o -name "*.go" $(EXCL_TP) -type f | sort)

#########################################
# OPTIONS                               #
#########################################
GCI_OPT                     ?= -s standard -s default -s "prefix(github.com/gardener/opentelemetry-collector)"
GOSEC_REPORT_OPT            ?= -exclude-generated -track-suppressions -stdout -fmt=sarif -out=gosec-report.sarif
GOSEC_OPT                   ?= -exclude-generated -track-suppressions -no-fail -stdout
TESTIFYLINT_OPT             ?= --enable-all --disable=float-compare,require-error,suite-subtest-run,encoded-compare
ADD_LICENSE_OPT             ?= -v -c "SAP SE or an SAP affiliate company and Gardener contributors" \
                                -l apache -s=only \
                                -y "$(shell date +"%Y")" \
                                -ignore "**/*.md" \
                                -ignore "**/generated*" \
                                -ignore "**/*.yaml"

#########################################
.DEFAULT_GOAL := all
all: go-generate tidy go-fmt go-lint goimports check-license-headers test

.PHONY: tidy
tidy:
	@go mod tidy

.PHONY: go-fmt
go-fmt:
	@gofmt -l -w .

.PHONY: go-check
go-check: tidy go-lint gosec check-license-headers

.PHONY: go-lint
go-lint:
	@go tool -modfile $(TOOLS_MOD_FILE) golangci-lint run \
	--config=$(REPO_ROOT)/.golangci.yaml \
	--allow-parallel-runners \
	--build-tags integration \
	--timeout=5m \
	--path-prefix $(shell basename "$(CURDIR)")

.PHONY: gosec
gosec:
	@go tool -modfile $(TOOLS_MOD_FILE) gosec $(GOSEC_OPT) ./...

.PHONY: gosec-report
gosec-report:
	@go tool -modfile $(TOOLS_MOD_FILE) gosec $(GOSEC_REPORT_OPT) ./...

.PHONY: test
test: tidy go-lint check-license-headers
	@echo "Running tests"
	@go tool -modfile $(TOOLS_MOD_FILE) gotestsum --packages="./..."

.PHONY: go-generate
go-generate:
	@go generate ./...
	@gofmt -l -w .

.PHONY: goimports
goimports:
	@go tool -modfile $(TOOLS_MOD_FILE) goimports -w ./
	@go tool -modfile $(TOOLS_MOD_FILE) gci write $(GCI_OPT) $(SRC_AND_DOC)

.PHONY: check-license-headers
check-license-headers:
	@echo "Checking license headers"
	@go tool -modfile $(TOOLS_MOD_FILE) addlicense \
		-check $(ADD_LICENSE_OPT) $(SRC_AND_SHELL) || \
		(echo "License headers are missing. Please run 'make add-license-headers' to add them." && exit 1)

.PHONY: add-license-headers
add-license-headers:
	@go tool -modfile $(TOOLS_MOD_FILE) addlicense $(ADD_LICENSE_OPT) $(SRC_AND_SHELL)
